<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="io.airbyte.integrations.source.postgres.PostgresSpecTest" tests="12" skipped="0" failures="0" errors="0" timestamp="2023-05-20T13:43:49" hostname="MacBook-Pro-3" time="4.243">
  <properties/>
  <testcase name="testSchemaMissing()" classname="io.airbyte.integrations.source.postgres.PostgresSpecTest" time="1.167"/>
  <testcase name="testWithoutReplicationMethod()" classname="io.airbyte.integrations.source.postgres.PostgresSpecTest" time="0.007"/>
  <testcase name="testJdbcAdditionalProperty()" classname="io.airbyte.integrations.source.postgres.PostgresSpecTest" time="1.591"/>
  <testcase name="testWithJdbcAdditionalProperty()" classname="io.airbyte.integrations.source.postgres.PostgresSpecTest" time="0.005"/>
  <testcase name="testWithReplicationMethodWithReplicationSlot()" classname="io.airbyte.integrations.source.postgres.PostgresSpecTest" time="0.106"/>
  <testcase name="[1] While reading Data" classname="io.airbyte.integrations.source.postgres.PostgresSpecTest" time="1.016"/>
  <testcase name="[2] After loading Data in the destination" classname="io.airbyte.integrations.source.postgres.PostgresSpecTest" time="0.008"/>
  <testcase name="testWithReplicationMethodWithReplicationSlotWithNull()" classname="io.airbyte.integrations.source.postgres.PostgresSpecTest" time="0.088"/>
  <testcase name="testWithReplicationMethodMissingPublication()" classname="io.airbyte.integrations.source.postgres.PostgresSpecTest" time="0.004"/>
  <testcase name="testWithReplicationMethodWithReplicationSlotWithWrongType()" classname="io.airbyte.integrations.source.postgres.PostgresSpecTest" time="0.005"/>
  <testcase name="testWithReplicationMethodStandard()" classname="io.airbyte.integrations.source.postgres.PostgresSpecTest" time="0.13"/>
  <testcase name="testDatabaseMissing()" classname="io.airbyte.integrations.source.postgres.PostgresSpecTest" time="0.006"/>
  <system-out><![CDATA[{"type":"LOG","log":{"level":"WARN","message":"WARN c.n.s.JsonMetaSchema(newValidator):278 Unknown keyword groups - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword"}}
{"type":"LOG","log":{"level":"WARN","message":"WARN c.n.s.JsonMetaSchema(newValidator):278 Unknown keyword order - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword"}}
{"type":"LOG","log":{"level":"WARN","message":"WARN c.n.s.JsonMetaSchema(newValidator):278 Unknown keyword group - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword"}}
{"type":"LOG","log":{"level":"WARN","message":"WARN c.n.s.JsonMetaSchema(newValidator):278 Unknown keyword airbyte_secret - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword"}}
{"type":"LOG","log":{"level":"WARN","message":"WARN c.n.s.JsonMetaSchema(newValidator):278 Unknown keyword always_show - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword"}}
{"type":"LOG","log":{"level":"WARN","message":"WARN c.n.s.JsonMetaSchema(newValidator):278 Unknown keyword pattern_descriptor - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword"}}
{"type":"LOG","log":{"level":"WARN","message":"WARN c.n.s.JsonMetaSchema(newValidator):278 Unknown keyword min - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword"}}
{"type":"LOG","log":{"level":"WARN","message":"WARN c.n.s.JsonMetaSchema(newValidator):278 Unknown keyword max - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword"}}
{"type":"LOG","log":{"level":"INFO","message":"INFO i.a.v.j.JsonSchemaValidator(test):120 JSON schema validation failed. \nerrors: $.replication_method.replication_slot: null found, string expected, $.replication_method.method: must be a constant value Standard"}}
{"type":"LOG","log":{"level":"INFO","message":"INFO i.a.v.j.JsonSchemaValidator(test):120 JSON schema validation failed. \nerrors: $.replication_method.method: must be a constant value Standard"}}
{"type":"LOG","log":{"level":"INFO","message":"INFO i.a.v.j.JsonSchemaValidator(test):120 JSON schema validation failed. \nerrors: $.replication_method.replication_slot: integer found, string expected, $.replication_method.method: must be a constant value Standard"}}
{"type":"LOG","log":{"level":"INFO","message":"INFO i.a.v.j.JsonSchemaValidator(test):120 JSON schema validation failed. \nerrors: $.database: is missing but it is required"}}
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
